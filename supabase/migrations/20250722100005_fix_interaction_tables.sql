/*
# [Fix Interaction Tables Schema]
This migration script drops and recreates the `likes`, `streams`, and `bookmarks` tables to ensure a consistent and correct schema. It establishes the necessary foreign key relationships with `tracks` and `profiles`, and sets up appropriate Row Level Security (RLS) policies.

## Query Description:
This operation is destructive and will delete any existing data in the `likes`, `streams`, and `bookmarks` tables before recreating them. This is necessary to resolve persistent schema conflicts. It is recommended to back up your data if you have important information in these tables, although given the context of development errors, they likely contain test data.

## Metadata:
- Schema-Category: "Dangerous"
- Impact-Level: "High"
- Requires-Backup: true
- Reversible: false

## Structure Details:
- **Tables Dropped:** `public.likes`, `public.streams`, `public.bookmarks` (if they exist).
- **Tables Created:** `public.likes`, `public.streams`, `public.bookmarks`.
- **Columns Added:** Standard columns for each table (`user_id`, `track_id`, `created_at`, etc.).
- **Constraints Added:** PRIMARY KEY and FOREIGN KEY constraints to link to `profiles` and `tracks`.

## Security Implications:
- RLS Status: Enabled on all three created tables.
- Policy Changes: Yes. New policies are created to allow public reads, and authenticated inserts/deletes for user-specific actions (likes, bookmarks). Stream insertion is public.
- Auth Requirements: `auth.uid()` is used to enforce policies for user-specific actions.

## Performance Impact:
- Indexes: Primary keys will create indexes. Foreign keys will also have indexes.
- Triggers: None.
- Estimated Impact: Low. These are standard relationship tables. Performance should be optimal for the intended queries.
*/

-- First, drop existing tables if they exist to ensure a clean state.
DROP TABLE IF EXISTS public.likes;
DROP TABLE IF EXISTS public.streams;
DROP TABLE IF EXISTS public.bookmarks;

-- Create the 'likes' table
CREATE TABLE public.likes (
    user_id UUID NOT NULL,
    track_id UUID NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    CONSTRAINT likes_pkey PRIMARY KEY (user_id, track_id),
    CONSTRAINT likes_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id) ON DELETE CASCADE,
    CONSTRAINT likes_track_id_fkey FOREIGN KEY (track_id) REFERENCES public.tracks(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.likes IS 'Stores user likes on tracks.';
ALTER TABLE public.likes ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access on likes" ON public.likes FOR SELECT USING (true);
CREATE POLICY "Allow individual insert access on likes" ON public.likes FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Allow individual delete access on likes" ON public.likes FOR DELETE USING (auth.uid() = user_id);


-- Create the 'streams' table
CREATE TABLE public.streams (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID,
    track_id UUID NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    CONSTRAINT streams_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id) ON DELETE SET NULL,
    CONSTRAINT streams_track_id_fkey FOREIGN KEY (track_id) REFERENCES public.tracks(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.streams IS 'Records each time a track is streamed.';
ALTER TABLE public.streams ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access on streams" ON public.streams FOR SELECT USING (true);
CREATE POLICY "Allow all insert access on streams" ON public.streams FOR INSERT WITH CHECK (true);


-- Create the 'bookmarks' table
CREATE TABLE public.bookmarks (
    user_id UUID NOT NULL,
    track_id UUID NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    CONSTRAINT bookmarks_pkey PRIMARY KEY (user_id, track_id),
    CONSTRAINT bookmarks_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id) ON DELETE CASCADE,
    CONSTRAINT bookmarks_track_id_fkey FOREIGN KEY (track_id) REFERENCES public.tracks(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.bookmarks IS 'Stores user bookmarks for tracks.';
ALTER TABLE public.bookmarks ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access on bookmarks" ON public.bookmarks FOR SELECT USING (true);
CREATE POLICY "Allow individual insert access on bookmarks" ON public.bookmarks FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Allow individual delete access on bookmarks" ON public.bookmarks FOR DELETE USING (auth.uid() = user_id);
