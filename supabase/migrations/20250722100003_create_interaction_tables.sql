/*
# [Schema Creation] Create Interaction Tables
This migration creates the necessary tables for user interactions: `likes`, `streams`, and `bookmarks`. It also establishes the foreign key relationships to the `tracks` and `profiles` tables, and sets up basic Row Level Security policies.

## Query Description:
This is a structural change that adds new tables to your database. It is safe to run on existing schemas as it only adds new objects and does not modify existing data.

## Metadata:
- Schema-Category: "Structural"
- Impact-Level: "Low"
- Requires-Backup: false
- Reversible: true (by dropping the tables)

## Structure Details:
- Creates table `public.likes`
- Creates table `public.streams`
- Creates table `public.bookmarks`
- Adds foreign key constraints to link these tables to `public.tracks` and `public.profiles`.

## Security Implications:
- RLS Status: Enabled on all new tables.
- Policy Changes: Basic policies are created to allow users to manage their own interactions and for public read access.
- Auth Requirements: Operations on these tables will require authenticated users.

## Performance Impact:
- Indexes: Primary keys and foreign key indexes are created, which will improve query performance for joins.
- Triggers: None.
- Estimated Impact: Low.
*/

-- Create the 'likes' table
CREATE TABLE public.likes (
    track_id uuid NOT NULL,
    user_id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT likes_pkey PRIMARY KEY (track_id, user_id),
    CONSTRAINT likes_track_id_fkey FOREIGN KEY (track_id) REFERENCES public.tracks(id) ON DELETE CASCADE,
    CONSTRAINT likes_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id) ON DELETE CASCADE
);

-- Enable Row Level Security on 'likes'
ALTER TABLE public.likes ENABLE ROW LEVEL SECURITY;

-- Create the 'streams' table
CREATE TABLE public.streams (
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    track_id uuid NOT NULL,
    user_id uuid,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT streams_pkey PRIMARY KEY (id),
    CONSTRAINT streams_track_id_fkey FOREIGN KEY (track_id) REFERENCES public.tracks(id) ON DELETE CASCADE,
    CONSTRAINT streams_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id) ON DELETE SET NULL
);

-- Enable Row Level Security on 'streams'
ALTER TABLE public.streams ENABLE ROW LEVEL SECURITY;

-- Create the 'bookmarks' table
CREATE TABLE public.bookmarks (
    track_id uuid NOT NULL,
    user_id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT bookmarks_pkey PRIMARY KEY (track_id, user_id),
    CONSTRAINT bookmarks_track_id_fkey FOREIGN KEY (track_id) REFERENCES public.tracks(id) ON DELETE CASCADE,
    CONSTRAINT bookmarks_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id) ON DELETE CASCADE
);

-- Enable Row Level Security on 'bookmarks'
ALTER TABLE public.bookmarks ENABLE ROW LEVEL SECURITY;

-- Add RLS Policies for 'likes'
CREATE POLICY "Allow users to manage their own likes" ON public.likes
FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Allow anyone to read likes" ON public.likes
FOR SELECT USING (true);

-- Add RLS Policies for 'streams'
CREATE POLICY "Allow users to insert their own stream records" ON public.streams
FOR INSERT WITH CHECK (auth.uid() = user_id OR user_id IS NULL);

CREATE POLICY "Allow anyone to read stream records" ON public.streams
FOR SELECT USING (true);

-- Add RLS Policies for 'bookmarks'
CREATE POLICY "Allow users to manage their own bookmarks" ON public.bookmarks
FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Allow anyone to read bookmarks" ON public.bookmarks
FOR SELECT USING (true);
